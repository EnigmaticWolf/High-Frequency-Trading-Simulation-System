% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/hftsimulator.r
\name{initializestates}
\alias{initializestates}
\title{initializestates}
\usage{
initializestates(tc = FALSE, Sleep = 1, IMLAZY = FALSE, DIGITSSECS = 3,
  STRINGSASFACTORS = FALSE, septraded = FALSE, unclosed = TRUE,
  closed = TRUE, interdaily = FALSE)
}
\arguments{
\item{tc}{logical, indicating wehter to use a simulated tradecenter. when tc=TRUE, submitmethod will be coerced to 'lazysubmission'(type ?lazysubmission for details). see 'Details' for more about tradecenter}

\item{Sleep}{numeric, idle time length of simulated tradecenter, measured in seconds, default 1. see 'Details' for more information.}

\item{IMLAZY}{logical, pleas set it to TRUE if you are lazy. type ?initializeinstrument for more infromation.}

\item{DIGITSSECS}{integer, second digits, default 3}

\item{septraded}{logical, indicating wether to record traded orders separately.}

\item{unclosed}{logical, indicating wether to track all unclosed orders, set unclosed=TRUE when you need to calculate mean open price and open profit. type ?meanopen for more infromation.}

\item{closed}{logical, indicating wether to track all zero holding states, set closed=TRUE when you need to calculate close profit.}

\item{interdaily}{logical, indicating wether to support interdaily trading.}
}
\value{
tradingstates env, an environment in .GlobelEnv containing all the parameters specified above.
}
\description{
initialize simulator states, including simulation back ground functionality and many ohter simulator related parameters. return an environment named 'tradingstates'. queuing orders and capital state will be saved and kept updated in tradingstates, see 'Details' for more information. *please read this documentation carefully before running any strategy!*
}
\details{
tradingstates: an environment containing all the simulators' parameters, there are two improtant dataframes stored in this envrionment, 'orders' and 'capital'. All current queuing orders will be recorded as one row in 'orders' during simulation. if there haven't submitted any orders or all the orders are traded(i.e. no queuing orders), 'orders' will be a data.frame with 0 rows. each instrument's capital state will be stored as one row in 'capital'. 'capital' has at least one row. one can use queryorder() and qureycapital() inside their strategy to fetch 'orders' and 'capital' from tradingstates.

orderhistory: every changed order will be recorded as one additional row in orderhistory after every updating(submit new order, cancel order, partial traded, all traded ...) of orders, saved as either a comma separated table in Redis or a local file. columns of the table are: instrumentid,orderid,direction,price, hands,action,trade time,trade price,cost and status. 'cost' represent the commission of current update, it's calculated from parameter `fee` specified in initializeinstrument(), type ?initializeinstrument for more details; 'status' represent current order's status: 0, all traded; 1, part traded, rest queuing; 2, part traded, rest canceled; 3, no trade, queuing; 4, no trade, no queuing; 5, canceled; 6, submission failed;

capitalhistory: the newest capital state will be recorded as one additional row in capitalhistory after each change, saved the same way as orderhistory. the columns are: instrumentid,today's long holdings, today's short holdings, previous long holdings, previous short holdings, total long holdings, total short holdings, cash, update time, trade price, traded hands and cost.

tradecenter: a simulated trade center. automatically check for unsatisfied orders and repalce them with new ones to achieve target holdings(target holdings are set by lazysubmission).  'Sleep' set the idle time between each checking, default 0.
}
\examples{
\dontrun{
## wirte capital and order histories to local file, don't sychronize target holdings, don't use simulated trade center and tell the simulator 'I'm not lazy'.
initializestates(realtime=FALSE,writeholding=FALSE,tc=FALSE,IMLAZY = FALSE)
}
}
\author{
Chen
}
\seealso{
\link{initializeinstrument} \link{lazysubmission} \link{meanopen}
}

